{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hanabiadgilgn/Documents/FullStackDevClass/phaseThree/Netflix-Clone/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport \"./Row.css\";\nimport axios from \"./axios\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"40px\"\n      },\n      children: trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/hanabiadgilgn/Documents/FullStackDevClass/phaseThree/Netflix-Clone/netflix-clone/src/Row.js"],"names":["React","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","useState","trailerUrl","setTrailerUrl","useEffect","fetchData","request","get","data","results","opts","heighr","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","poster_path","backdrop_path","name","id","padding"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAGA,MAAMC,QAAQ,GAAG,sCAAjB;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA;AAAnB,CAAb,EAA8C;AAAA;;AAC1C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BF,QAAQ,CAAC,EAAD,CAA5C;AACAG,EAAAA,SAAS,CAAC,MAAM;AAChB,mBAAeC,SAAf,GAA2B;AACvB,YAAMC,OAAO,GAAG,MAAMf,KAAK,CAACgB,GAAN,CAAUV,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACM,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACH;;AACDD,IAAAA,SAAS;AACR,GAPQ,EAON,CAACR,QAAD,CAPM,CAAT;AASA,QAAMa,IAAI,GAAG;AACbC,IAAAA,MAAM,EAAE,KADK;AAEbC,IAAAA,KAAK,EAAE,MAFM;AAGbC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHC,GAAb;;AAOA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC/B,QAAGd,UAAH,EAAc;AACVC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEM;AACFV,MAAAA,YAAY,CAAC,CAAAuB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEpB,KAAP,KAAgB,EAAjB,CAAZ,CACCqB,IADD,CACOC,GAAD,IAAS;AACf,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAnB,QAAAA,aAAa,CAACgB,SAAS,CAACZ,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,OAJG,EAKCgB,KALD,CAKQC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALlB;AAMH;AACJ,GAXG;;AAaA,sBACA;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACI;AAAA,gBAAK5B;AAAL;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACCG,MAAM,CAAC4B,GAAP,CAAYX,KAAD,iBACZ;AAEI,QAAA,OAAO,EAAE,MAAMD,WAAW,CAACC,KAAD,CAF9B;AAGI,QAAA,SAAS,EAAG,eAAclB,UAAU,IAAI,kBAAmB,EAH/D;AAII,QAAA,GAAG,EAAG,GAAEJ,QAAS,GACjBI,UAAU,GAAGkB,KAAK,CAACY,WAAT,GAAuBZ,KAAK,CAACa,aACtC,EANL;AAOI,QAAA,GAAG,EAAEb,KAAK,CAACc;AAPf,SACSd,KAAK,CAACe,EADf;AAAA;AAAA;AAAA;AAAA,cADC;AADD;AAAA;AAAA;AAAA;AAAA,YAFJ,eAeI;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA,gBACK9B,UAAU,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEA,UAAlB;AAA8B,QAAA,IAAI,EAAEQ;AAApC;AAAA;AAAA;AAAA;AAAA;AADnB;AAAA;AAAA;AAAA;AAAA,YAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAqBH;;GArDQf,G;;KAAAA,G;AAuDT,eAAeA,GAAf","sourcesContent":["import React from 'react'\nimport \"./Row.css\";\nimport axios from \"./axios\";\nimport YouTube from \"react-youtube\"\nimport movieTrailer from \"movie-trailer\"\n\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n    const [movies, setMovies] = useState([]);\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\n    useEffect(() => {\n    async function fetchData() {\n        const request = await axios.get(fetchUrl);\n        setMovies(request.data.results);\n        return request;\n    }\n    fetchData();\n    }, [fetchUrl]);\n\n    const opts = {\n    heighr: \"390\",\n    width: \"100%\",\n    playerVars: {\n        autoplay: 1,\n    }\n    }\n    const handleClick = (movie) => {\n    if(trailerUrl){\n        setTrailerUrl('')\n    }else {\n        movieTrailer(movie?.title || \"\")\n        .then((url) => {\n        const urlParams = new URLSearchParams(new URL(url).search)\n        setTrailerUrl(urlParams.get('v'))\n    })\n        .catch((error) => console.log(error))\n    }\n}\n\n    return (\n    <div className=\"row\">\n        <h2>{title}</h2>\n        <div className=\"row__posters\">\n        {movies.map((movie) => (\n        <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            src={`${base_url}${\n            isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n        />\n        ))}\n        </div>\n        <div style={{ padding: \"40px\"}}>\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n        </div>\n    </div>\n);\n}\n\nexport default Row;"]},"metadata":{},"sourceType":"module"}